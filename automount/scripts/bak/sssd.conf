[sssd]
config_file_version = 2
services = nss, pam, autofs
domains = lab.bewley.net

[nss]
filter_groups = root
filter_users = root
# Add other local users/groups to filter if needed

[pam]
# PAM configuration options

[domain/lab.bewley.net]
debug_level = 9
id_provider = ldap
auth_provider = ldap
chpass_provider = ldap
ldap_uri = ldap://ldap.lab.bewley.net
ldap_search_base = dc=lab,dc=bewley,dc=net
ldap_default_bind_dn =  cn=admin,dc=lab,dc=bewley,dc=net # Optional: for authenticated searches if anonymous is restricted
ldap_default_authtok = ldap # Optional: password for the bind DN

# Schema can be rfc2307bis if you use memberOf overlay for groups,
# or rfc2307 for standard posixGroup with memberUid
ldap_schema = rfc2307
ldap_user_search_base = ou=People,dc=lab,dc=bewley,dc=net
ldap_group_search_base = ou=Group,dc=lab,dc=bewley,dc=net
ldap_user_object_class = inetOrgPerson
ldap_user_home_directory = homeDirectory
ldap_user_principal = uid # Adjust if using userPrincipalName for Kerberos

# TLS/SSL: For production, highly recommended
# ldap_tls_reqcert = demand
# ldap_tls_cacert = /etc/pki/tls/certs/ca.crt # Path to your CA certificate

# Autofs SSSD Integration
autofs_provider = ldap
ldap_autofs_search_base = ou=automount,dc=lab,dc=bewley,dc=net

# Define how SSSD finds the automaster map
# This name ("ldap-automaster") will be used in /etc/auto.master.d/
# The ldap_autofs_map_object_class should match what you used in LDAP (automountMap)
# The ldap_autofs_entry_object_class should match what you used (automount)
# The ldap_autofs_map_name is the 'ou' (or cn) of your automaster map in LDAP
# The ldap_autofs_entry_key is the 'cn' of the automount entry
# The ldap_autofs_entry_value is 'automountInformation'

# SSSD will look for maps based on the ldap_autofs_search_base.
# For master map:
# ldap_autofs_master_map_name = cn=auto.master # if your master map is named auto.master
# In our case, we tell SSSD to get specific maps by their DN.

# Tell SSSD about the specific LDAP search bases for autofs maps
# This is how SSSD finds 'auto.home' from the previous LDAP entry cn=/home,automountInformation: auto.home
ldap_autofs_map_name = auto.home
ldap_autofs_search_base_auto.home = ou=auto.home,ou=automount,dc=lab,dc=bewley,dc=net

# If you had another map, e.g., auto.projects:
# ldap_autofs_map_name = auto.projects
# ldap_autofs_search_base_auto.projects = ou=autoprojects,ou=autofs,dc=example,dc=com

# Fallback to legacy mode if needed (usually not for modern setups)
# ldap_autofs_use_legacy_schema = false

# SSSD will use these to interpret the entries within the maps
ldap_autofs_map_object_class = automountMap
ldap_autofs_entry_object_class = automount
ldap_autofs_map_name_attribute = ou # or 'cn' if your map container is a 'cn'
ldap_autofs_entry_key_attribute = cn
ldap_autofs_entry_value_attribute = automountInformation

# Enable for debugging SSSD autofs issues:
# debug_level = 9 in [autofs] and [domain/example.com] sections

# Cache credentials
cache_credentials = True
ldap_pwd_policy = none # Or 'shadow' if using shadowAccount password policies from LDAP

# Offline logins
# enumerate = true # Be cautious with this in large environments

[autofs]
# No specific config needed here unless overriding domain settings
# You can add debug_level here as well for autofs-specific SSSD debugging
debug_level = 9